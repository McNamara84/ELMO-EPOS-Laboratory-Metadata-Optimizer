name: Selenium Tests

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  selenium:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root_password
          MYSQL_DATABASE: mde2-msl-test
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping --silent"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3

    steps:
    - uses: actions/checkout@v4

    - name: Set up PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, mysql, zip
        coverage: xdebug

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: Create test network
      run: docker network create test-network

    - name: Start Selenium container
      run: |
        docker run -d \
          --network test-network \
          --name selenium \
          -e SE_NODE_MAX_SESSIONS=1 \
          -e SE_NODE_OVERRIDE_MAX_SESSIONS=true \
          -e SE_VNC_NO_PASSWORD=1 \
          -p 4444:4444 \
          -p 7900:7900 \
          --shm-size="2g" \
          selenium/standalone-chrome:latest

    - name: Install Selenium Dependencies
      run: |
        npm install -g selenium-side-runner@latest
        npm install -g selenium-webdriver

    - name: Update Composer dependencies
      run: composer update --no-interaction --no-progress

    - name: Install dependencies
      run: |
        composer install --prefer-dist --no-progress --no-suggest
        composer dump-autoload -o

    - name: Set up database
      run: |
        mysql -h127.0.0.1 -uroot -proot_password -e "
          CREATE USER IF NOT EXISTS 'test_user'@'%' IDENTIFIED BY 'test_password';
          GRANT ALL PRIVILEGES ON *.* TO 'test_user'@'%';
          FLUSH PRIVILEGES;
        "

    - name: Create settings.php and install
      run: |
        cat << EOF > settings.php
        <?php
        error_reporting(E_ALL);
        ini_set('display_errors', 1);

        function connectDb() {
            \$host = '127.0.0.1';
            \$username = 'test_user';
            \$password = 'test_password';
            \$database = 'mde2-msl-test';
            \$conn = new mysqli(\$host, \$username, \$password, \$database);
            return \$conn;
        }

        function getApiKey() {
            \$apiKeyGoogleMaps = 'test_api_key';
            echo json_encode(['apiKey' => \$apiKeyGoogleMaps]);
        }

        if (basename(__FILE__) == basename(\$_SERVER['PHP_SELF'])) {
            if (\$_SERVER['REQUEST_METHOD'] === 'GET') {
                getApiKey();
            }
        }

        \$connection = connectDb();

        \$apiKeyTimezone = 'test_timezone_api_key';
        \$maxTitles = 2;
        \$mslLabsUrl = 'https://raw.githubusercontent.com/UtrechtUniversity/msl_vocabularies/main/vocabularies/labs/labnames.json';

        \$showFeedbackLink = true;
        \$smtpHost = 'smtp.test.de';
        \$smtpPort = 465;
        \$smtpUser = 'test_user';
        \$smtpPassword = 'test_password';
        \$smtpSender = 'test_sender@test.com';
        \$feedbackAdress = 'feedback@test.com';
        EOF

        php install.php

    - name: Start PHP container
      run: |
        docker run -d \
          --network test-network \
          --name php-app \
          -v ${{ github.workspace }}:/var/www/html \
          -p 8000:8000 \
          -e PHP_INI_SCAN_DIR=/var/www/html \
          php:8.2-cli \
          php -S 0.0.0.0:8000 -t /var/www/html -d display_errors=1 -d error_reporting=E_ALL

    - name: Create PHP info page
      run: |
        echo "<?php phpinfo(); ?>" > info.php
        echo "<?php error_log('Debug: Loading application...'); ?>" > debug.php

    - name: Wait for PHP application to be ready
      run: |
        for i in {1..30}; do
          if curl -s http://localhost:8000/ > /dev/null; then
            echo "PHP application is ready."
            break
          fi
          echo "Waiting for PHP application..."
          sleep 2
        done

    - name: Wait for services and verify
      run: |
        # Create test output directory
        mkdir -p test-output

        # Test PHP server
        echo "Testing PHP server..."
        curl -v http://localhost:8000/info.php > test-output/php-info.html
        curl -v http://localhost:8000/debug.php
        curl -v http://localhost:8000/ > test-output/index.html

        # Test Selenium
        echo "Testing Selenium..."
        curl -v http://localhost:4444/wd/hub/status > test-output/selenium-status.json

        # Show network info
        echo "Docker network info:"
        docker network inspect test-network

        # Show running containers
        echo "Running containers:"
        docker ps

        # Show PHP logs
        echo "PHP container logs:"
        docker logs php-app

    - name: Test connectivity from Selenium container
      run: |
        echo "Testing connectivity from Selenium container to PHP application..."
        docker exec selenium curl -v http://php-app:8000/ -o /dev/null

    - name: Run Selenium tests
      run: |
        selenium-side-runner \
          --debug \
          --browser chrome \
          --server http://localhost:4444/wd/hub \
          --base-url http://php-app:8000 \
          --timeout-pageLoad 30000 \
          --timeout-script 30000 \
          --timeout-element 30000 \
          tests/Selenium/Tests_MDE.side

    - name: Show debug info on failure
      if: failure()
      run: |
        echo "PHP container logs:"
        docker logs php-app
        echo "Selenium container logs:"
        docker logs selenium
        echo "Network status:"
        docker network inspect test-network
        echo "Container status:"
        docker ps -a
        echo "Directory contents:"
        ls -la
        echo "Test output contents:"
        ls -la test-output/
        cat test-output/* || true

    - name: Upload artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: logs-and-results
        path: |
          test-output/
          *.log
          *.php

    - name: Cleanup
      if: always()
      run: |
        docker stop php-app selenium || true
        docker rm php-app selenium || true
        docker network rm test-network || true
