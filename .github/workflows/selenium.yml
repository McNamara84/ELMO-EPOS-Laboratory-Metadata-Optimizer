name: Selenium Tests

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  selenium:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root_password
          MYSQL_DATABASE: mde2-msl-test
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping --silent"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3

    steps:
    - uses: actions/checkout@v4

    - name: Set up PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, mysql, zip
        coverage: xdebug

    - name: Setup Chrome and ChromeDriver
      uses: browser-actions/setup-chrome@latest
      with:
        chrome-version: stable

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: Install Selenium Dependencies
      run: |
        npm install -g selenium-side-runner@3.17.0
        npm install -g chromedriver

    - name: Update Composer dependencies
      run: composer update --no-interaction --no-progress

    - name: Install dependencies
      run: |
        composer install --prefer-dist --no-progress --no-suggest
        composer dump-autoload -o

    - name: Set up database
      run: |
        mysql -h127.0.0.1 -uroot -proot_password -e "
          CREATE USER IF NOT EXISTS 'test_user'@'%' IDENTIFIED BY 'test_password';
          GRANT ALL PRIVILEGES ON *.* TO 'test_user'@'%';
          FLUSH PRIVILEGES;
        "

    - name: Create settings.php
      run: |
        cat << EOF > settings.php
        <?php
        function connectDb() {
            \$host = '127.0.0.1';
            \$username = 'test_user';
            \$password = 'test_password';
            \$database = 'mde2-msl-test';
            \$conn = new mysqli(\$host, \$username, \$password, \$database);
            return \$conn;
        }

        function getApiKey() {
            \$apiKeyGoogleMaps = 'test_api_key';
            echo json_encode(['apiKey' => \$apiKeyGoogleMaps]);
        }

        if (basename(__FILE__) == basename(\$_SERVER['PHP_SELF'])) {
            if (\$_SERVER['REQUEST_METHOD'] === 'GET') {
                getApiKey();
            }
        }

        \$connection = connectDb();

        \$apiKeyTimezone = 'test_timezone_api_key';
        \$maxTitles = 2;
        \$mslLabsUrl = 'https://raw.githubusercontent.com/UtrechtUniversity/msl_vocabularies/main/vocabularies/labs/labnames.json';

        \$showFeedbackLink = true;
        \$smtpHost = 'smtp.test.de';
        \$smtpPort = 465;
        \$smtpUser = 'test_user';
        \$smtpPassword = 'test_password';
        \$smtpSender = 'test_sender@test.com';
        \$feedbackAdress = 'feedback@test.com';
        EOF

    - name: Run install.php
      run: php install.php

    - name: Setup Display
      run: |
        sudo apt-get install -y xvfb
        export DISPLAY=:99
        Xvfb :99 -screen 0 1280x1024x24 > /dev/null 2>&1 &
        sleep 3

    - name: Start PHP server
      run: |
        php -S 127.0.0.1:8000 -t . > php-server.log 2>&1 &
        echo $! > php-server.pid
        
        # Wait for PHP server to be ready
        max_attempts=30
        attempt=1
        echo "Waiting for PHP server to be ready..."
        while [ $attempt -le $max_attempts ]; do
          if curl -s http://127.0.0.1:8000 > /dev/null; then
            echo "PHP server is ready!"
            break
          fi
          echo "Attempt $attempt of $max_attempts"
          sleep 1
          attempt=$((attempt + 1))
        done
        
        if [ $attempt -gt $max_attempts ]; then
          echo "PHP server failed to start"
          cat php-server.log
          exit 1
        fi

    - name: Start ChromeDriver
      run: |
        chromedriver --port=4444 --whitelisted-ips="" --url-base=/wd/hub &
        echo $! > chromedriver.pid
        
        # Wait for ChromeDriver
        sleep 5

    - name: Run Selenium tests
      run: |
        # Set timeout and retry settings
        export SELENIUM_TIMEOUT=30000
        export SELENIUM_IMPLICIT_WAIT=30000
        
        selenium-side-runner \
          --capability "chromeOptions.args=[--headless,--no-sandbox,--disable-dev-shm-usage]" \
          --server http://localhost:4444/wd/hub \
          --base-url http://127.0.0.1:8000 \
          --timeout-pageLoad 30000 \
          --timeout-script 30000 \
          --timeout-element 30000 \
          tests/Selenium/Tests_MDE.side

    - name: Show logs on failure
      if: failure()
      run: |
        echo "PHP Server Log:"
        cat php-server.log
        echo "Chrome Driver Log:"
        cat chromedriver.log || true

    - name: Stop services
      if: always()
      run: |
        kill $(cat php-server.pid) || true
        kill $(cat chromedriver.pid) || true

    - name: Upload artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: logs
        path: |
          *.log
          /var/log/apache2/*