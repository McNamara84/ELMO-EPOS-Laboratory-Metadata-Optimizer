openapi: 3.1.0
info:
  title: Metadata Editor 2 - MSL Edition
  description: |-
    This is the Metadata Editor API V2 from GFZ Data Services based on the OpenAPI 3.1 specification. You can find the new version on our [test server](https://mde2.cats4future.de).

    Some useful links:
    - [The MDE2-MSL repository](https://github.com/McNamara84/gfz-metadata-editor-msl-v2)
    - [Test Server](https://mde2.cats4future.de)
  termsOfService: https://github.com/McNamara84/gfz-metadata-editor-msl-v2
  contact:
    email: ehrmann@gfz-potsdam.de
  license:
    name: MIT
    url: https://raw.githubusercontent.com/McNamara84/gfz-metadata-editor-msl-v2/refs/heads/main/LICENSE.md
  version: 1.7.0
externalDocs:
  description: Documentation of the API V1 at GitHub
  url: https://github.com/McNamara84/gfz-metadata-editor-msl-v2#api-endpunkte
servers:
  - url: https://mde2.cats4future.de/api/v2
tags:
  - name: general
    description: General operations for health checks and version
  - name: update
    description: Operations about updating the vocabularies
  - name: vocabularies
    description: Operations related to retrieving vocabularies
  - name: validation
    description: Operations to validate data
  - name: dataset
    description: Operations for dataset management and export
paths:
  /update/timezones:
    get:
      tags:
        - update
      summary: Update timezones
      description: Fetches the latest timezones from TimeZoneDB API and updates the local JSON file.
      operationId: updateTimezones
      responses:
        "200":
          description: Timezones successfully updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TimezonesUpdateResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /update/vocabs/msl:
    get:
      tags:
        - update
      summary: Update MSL vocabularies
      description: Update vocabularies for MSL
      operationId: getMslVocab
      parameters:
        - in: query
          name: type
          schema:
            type: string
            enum:
              [
                all,
                analogue,
                geochemistry,
                geologicalage,
                geologicalsetting,
                materials,
                microscopy,
                paleomagnetism,
                porefluids,
                rockphysics,
              ]
          description: Type of vocabulary to update. If not provided, defaults to 'all'.
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VocabularyUpdate"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /update/vocabs/msl/labs:
    get:
      tags:
        - update
      summary: Update MSL Labs vocabulary
      description: Fetch and update the MSL Labs vocabulary from the GitHub repository. The response includes the updated labs with their IDs.
      operationId: updateMslLabs
      responses:
        "200":
          description: MSL Labs vocabulary successfully updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MSLLabsUpdateResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /general/alive:
    get:
      tags:
        - general
      summary: Health check
      description: Check if the API is responsive
      operationId: getAlive
      responses:
        "200":
          description: API is responsive
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /vocabs/sciencekeywords:
    get:
      tags:
        - vocabularies
      summary: Get GCMD Science Keywords
      description: Retrieve the controlled vocabulary of GCMD Science Keywords from NASA as a JSON string
      operationId: getGcmdScienceKeywords
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VocabularyTree"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /vocabs/roles:
    get:
      tags:
        - vocabularies
      summary: Retrieve roles based on type
      description: Get a list of roles filtered by type (`all`, `person`, `institution`, or `both`).
      operationId: getRoles
      parameters:
        - in: query
          name: type
          schema:
            type: string
            enum:
              - all
              - person
              - institution
              - both
          description: Type of roles to retrieve. Defaults to 'all' if not specified.
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Role"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: No roles found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /vocabs/relations:
    get:
      tags:
        - vocabularies
      summary: Get all relations
      description: Retrieve a list of all available relations for dataset relationships
      operationId: getRelations
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RelationsResponse"
        "404":
          description: No relations found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "No relations found"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "Database error"
  /validation/patterns/{type}:
    get:
      tags:
        - validation
      summary: Retrieve regex pattern for validation
      description: Returns the regex pattern for the validation of the specified type.
      operationId: getPattern
      parameters:
        - in: path
          name: type
          required: true
          schema:
            type: string
          description: The type for which the validation pattern is to be retrieved.
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PatternResponse"
        "404":
          description: Pattern not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /validation/identifiertypes:
    get:
      tags:
        - validation
      summary: Retrieve all identifier types
      description: Returns a list of all available identifier types with their validation patterns.
      operationId: getIdentifierTypes
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdentifierTypesResponse"
        "404":
          description: No identifier types found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /dataset/export/{id}/{scheme}:
    get:
      tags:
        - dataset
      summary: Export dataset as XML
      description: |
        Export a dataset as XML file in different metadata schemes. Available schemes are:
        * DataCite - for DOI registration and citation
        * ISO 19115 - for geospatial metadata
        * DIF - Directory Interchange Format for NASA's GCMD
      operationId: exportDataset
      parameters:
        - name: id
          in: path
          description: ID of the dataset to export
          required: true
          schema:
            type: integer
            format: int64
        - name: scheme
          in: path
          description: Metadata scheme for the export
          required: true
          schema:
            type: string
            enum:
              - datacite
              - iso
              - dif
            example: datacite
        - name: download
          in: query
          description: If true, the response will be downloaded as a file
          required: false
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: Successful operation
          content:
            application/xml:
              schema:
                type: string
                format: binary
              examples:
                datacite:
                  summary: DataCite XML example
                  value: |
                    <?xml version="1.0" encoding="UTF-8"?>
                    <resource xmlns="http://datacite.org/schema/kernel-4">
                      <identifier identifierType="DOI">10.5880/GFZ.4.1.2023.001</identifier>
                      <!-- Additional DataCite XML content -->
                    </resource>
                iso:
                  summary: ISO 19115 XML example
                  value: |
                    <?xml version="1.0" encoding="UTF-8"?>
                    <gmd:MD_Metadata xmlns:gmd="http://www.isotc211.org/2005/gmd">
                      <!-- ISO 19115 XML content -->
                    </gmd:MD_Metadata>
                dif:
                  summary: DIF XML example
                  value: |
                    <?xml version="1.0" encoding="UTF-8"?>
                    <DIF xmlns="http://gcmd.gsfc.nasa.gov/Aboutus/xml/dif/">
                      <!-- DIF XML content -->
                    </DIF>
        "400":
          description: Invalid ID or scheme supplied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "Invalid metadata scheme. Supported schemes are: datacite, iso, dif"
        "404":
          description: Dataset not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "Dataset with ID 123 not found"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "Error transforming dataset to XML"
components:
  schemas:
    TimezonesUpdateResponse:
      type: object
      properties:
        message:
          type: string
          example: "Timezones successfully updated"
        timezones:
          type: array
          items:
            $ref: "#/components/schemas/Timezone"
      required:
        - message
        - timezones
    Timezone:
      type: object
      properties:
        value:
          type: string
          description: The timezone identifier
          example: "Europe/Berlin"
        label:
          type: string
          description: The formatted timezone label
          example: "UTC+02:00 (Europe/Berlin)"
      required:
        - value
        - label
    VocabularyUpdate:
      type: object
      properties:
        message:
          type: string
          example: "Updating vocab for type: all"
        results:
          type: object
          additionalProperties:
            type: string
          example:
            analogue: "Updated to version 1.5"
            geochemistry: "Updated to version 1.4"
            geologicalage: "No data found"
      required:
        - message
        - results
    RelationsResponse:
      type: object
      properties:
        relations:
          type: array
          items:
            $ref: "#/components/schemas/Relation"
      required:
        - relations

    Relation:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier of the relation (relation_id in database)
          example: 1
        name:
          type: string
          description: Name of the relation (max 45 characters)
          example: "IsCitedBy"
          maxLength: 45
        description:
          type: string
          description: Description of the relation (max 1000 characters)
          example: "Indicates that the related dataset cites this dataset"
          maxLength: 1000
      required:
        - id
        - name
        - description
    MSLLabsUpdateResponse:
      type: object
      properties:
        message:
          type: string
          example: "MSL Labs vocabulary successfully updated"
        labs:
          type: array
          items:
            $ref: "#/components/schemas/MSLLab"
      required:
        - message
        - labs
    MSLLab:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the lab
          example: "lab1"
        name:
          type: string
          description: Name of the laboratory
          example: "Laboratory A"
        affiliation:
          type: string
          description: Affiliation of the laboratory
          example: "University X"
      required:
        - id
        - name
        - affiliation
    Error:
      type: object
      properties:
        error:
          type: string
          example: "An error occurred"
    HealthResponse:
      type: object
      properties:
        message:
          type: string
          example: "I'm still alive..."
    VocabularyTree:
      type: array
      items:
        $ref: "#/components/schemas/VocabularyNode"
    VocabularyNode:
      type: object
      properties:
        id:
          type: string
        text:
          type: string
        language:
          type: string
        scheme:
          type: string
        schemeURI:
          type: string
        description:
          type: string
        children:
          type: array
          items:
            $ref: "#/components/schemas/VocabularyNode"
      required:
        - id
        - text
        - language
        - scheme
        - schemeURI
        - description
        - children
    Role:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Data Curator"
        forInstitutions:
          type: integer
          description: |
            Indicates the type of institution:
            - `0`: for persons
            - `1`: for institutions
            - `2`: for both
          example: 0
      required:
        - id
        - name
        - forInstitutions
    PatternResponse:
      type: object
      properties:
        pattern:
          type: string
          example: "^[a-zA-Z0-9]{10}$"
      required:
        - pattern
    IdentifierTypesResponse:
      type: object
      properties:
        identifierTypes:
          type: array
          items:
            $ref: "#/components/schemas/IdentifierType"
      required:
        - identifierTypes
    IdentifierType:
      type: object
      properties:
        name:
          type: string
          description: Name of the identifier type
          example: "DOI"
        pattern:
          type: string
          description: Regular expression pattern for validation
          example: "^10\\.\\d{4,9}/[-._;()/:A-Z0-9]+$"
        description:
          type: string
          description: Description of the identifier type
          example: "Digital Object Identifier"
      required:
        - name
        - pattern
        - description
